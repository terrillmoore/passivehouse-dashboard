[{"id":"3b21b7db.6abef8","type":"tab","label":"Electric meters","disabled":false,"info":""},{"id":"efd6cb51.b307e8","type":"subflow","name":"Decode Model 4811 Power","info":"Decode a device message from a Model 4811 power meter.\n\nOutputs are debug, Database and Common RF","category":"","in":[{"x":60,"y":140,"wires":[{"id":"9b185d33.78a58"}]}],"out":[{"x":560,"y":120,"wires":[{"id":"d18b49b2.7cb8d","port":0}]},{"x":560,"y":320,"wires":[{"id":"c9bb3943.128558","port":0}]},{"x":560,"y":460,"wires":[{"id":"ee7c386b.1877c","port":0}]}],"env":[]},{"id":"23e15b07.e584c4","type":"subflow","name":"Set Node Mapping","info":"Input is a message\nOutput is same message, with display_key set to \"{app_id}.{dev_id}\" and display_name set to a friendly name from the built-in map.","in":[{"x":108,"y":350,"wires":[{"id":"265ba134.a68206"}]}],"out":[{"x":515,"y":346,"wires":[{"id":"265ba134.a68206","port":0}]}]},{"id":"1425b308.007df5","type":"subflow","name":"Decode Sensor Data (port 2)","info":"Decode a device message from an indoor or outdoor sensor on port 2.\n\nOutputs are debug, Database and Common RF.","category":"","in":[{"x":60,"y":140,"wires":[{"id":"1bbca2c8.2f7345"}]}],"out":[{"x":560,"y":120,"wires":[{"id":"7169e781.cc8718","port":0}]},{"x":560,"y":320,"wires":[{"id":"fd43e53b.f6beb","port":0}]},{"x":560,"y":460,"wires":[{"id":"3aa0753f.2a6a3a","port":0}]}],"env":[]},{"id":"7998532e.920204","type":"subflow","name":"Prep for RF store","info":"","category":"","in":[{"x":20,"y":80,"wires":[{"id":"c959fd26.95af78"}]}],"out":[{"x":360,"y":80,"wires":[{"id":"c959fd26.95af78","port":0}]}],"env":[]},{"id":"8d786b21.552c1","type":"ttn app","z":"","appId":"passivehouse-ecovillage","accessKey":"ttn-account-**REPLACED**","discovery":"discovery.thethingsnetwork.org:1900"},{"id":"1afacbdf.06490c","type":"influxdb","z":"","hostname":"influxdb","port":"8086","protocol":"http","database":"passivehouse-ecovillage","name":"Primary database","usetls":false,"tls":""},{"id":"24b88e53.200882","type":"ttn uplink","z":"3b21b7db.6abef8","name":"Data","app":"8d786b21.552c1","dev_id":"","field":"","x":70,"y":160,"wires":[["9248cc89.2255","fc52c7d6.af67e8"]]},{"id":"9248cc89.2255","type":"debug","z":"3b21b7db.6abef8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":480,"y":160,"wires":[]},{"id":"265ba134.a68206","type":"function","z":"23e15b07.e584c4","name":"Map devID to friendy name","func":"// set up the table of names\nvar nodeMap = global.get(\"nodeMap\");\n//if (nodeMap === undefined)\n    {\n    // populate the map if needed.\n    nodeMap = {};\n    nodeMap['passivehouse-ecovillage.wnd-m1-mb-742890'] = {display_id:\"Unit 1: Grid (742890)\" };\n    nodeMap['passivehouse-ecovillage.wnd-m1-mb-742901'] = {display_id:\"Unit 3: Grid (742901)\" };\n    nodeMap['passivehouse-ecovillage.wnd-m1-mb-742905'] = {display_id:\"Unit 2: Grid (742905)\" };\n    nodeMap['passivehouse-ecovillage.wnd-m1-mb-742906'] = {display_id:\"Unit 1: Solar (742906)\" };\n    nodeMap['passivehouse-ecovillage.wnd-m1-mb-742909'] = {display_id:\"Unit 2: Solar (742909)\" };\n\n    nodeMap['passivehouse-ecovillage.indoor-0002cc010000026b'] = {display_id:\"Unit 1: Indoor downstairs (02-6b)\" };\n    nodeMap['passivehouse-ecovillage.indoor-0002cc0100000280'] = {display_id:\"Unit 1: Indoor upstairs (02-80)\" };\n    nodeMap['passivehouse-ecovillage.indoor-0002cc0100000289'] = {display_id:\"Unit 2: Indoor downstairs (02-89)\" };\n    nodeMap['passivehouse-ecovillage.indoor-0002cc010000028d'] = {display_id:\"Unit 3: Indoor upstairs (02-8d)\" };\n    nodeMap['passivehouse-ecovillage.indoor-0002cc010000028e'] = {display_id:\"Unit 3: Indoor downstairs (02-8e)\" };\n    nodeMap['passivehouse-ecovillage.indoor-0002cc0100000290'] = {display_id:\"Unit 2: Indoor upstairs (02-90)\" };\n    \n    nodeMap['passivehouse-ecovillage.outdoor-0002cc0100000269'] = {display_id:\"Unit 1: Outdoors\" };\n    nodeMap['passivehouse-ecovillage.outdoor-0002cc010000028c'] = {display_id:\"Unit 2: Outdoors\" };\n    nodeMap['passivehouse-ecovillage.outdoor-0002cc010000028f'] = {display_id:\"Unit 3: Outdoors\" };\n\n    global.set(\"nodeMap\", nodeMap);\n    }\n\n// use app_id.dev_id to form a key\n// and put into the message\nvar sKey = msg.app_id + \".\" + msg.dev_id;\n\nmsg.display_key = sKey;\n\n// translate the key if needed.\nif (sKey in nodeMap)\n    {\n    msg.display_id = nodeMap[sKey].display_id;\n    if (\"lat\" in nodeMap[sKey])\n        msg.display_lat = nodeMap[sKey].lat;\n    if (\"long\" in nodeMap[sKey])\n        msg.display_long = nodeMap[sKey].long;\n    }\nelse\n    {\n    msg.display_id = sKey;\n    }\n\nreturn msg;","outputs":1,"noerr":0,"x":316,"y":349,"wires":[[]]},{"id":"9b185d33.78a58","type":"subflow:23e15b07.e584c4","z":"efd6cb51.b307e8","name":"","x":210,"y":140,"wires":[["d18b49b2.7cb8d"]]},{"id":"d18b49b2.7cb8d","type":"function","z":"efd6cb51.b307e8","name":"Decode port 1.0x19","func":"function u4toFloat32(bytes, i)\n\t{\n\t// pick up four bytes at i\n\tvar u32 = (bytes[i] << 24) + (bytes[i+1] << 16) + (bytes[i+2] << 8) + bytes[i+3];\n\n\t// extract sign\n\tvar bSign =     (u32 & 0x80000000) ? true : false;\n\tvar uExp =      (u32 & 0x7F800000) >> 23;\n\tvar uMantissa = (u32 & 0x007FFFFF);\n\n\t// unless denormal, set the 1.0 bit\n\tif (uExp != 0)\n\t\tuMantissa +=   0x00800000;\n\telse\n\t\tuExp += 1;\n\n\t// make a floating mantissa in [0,2)\n\tvar mantissa = uMantissa / 0x00800000;\n\n\t// apply the exponent.\n\tmantissa = Math.pow(2, uExp - 127) * mantissa;\n\treturn bSign ? -mantissa : mantissa;\n\t}\n\nfunction u2toInt16(bytes, i)\n\t{\n\tvar u16 = (bytes[i+0] << 8) + bytes[i+1];\n\n\tif (u16 & 0x8000)\n\t\treturn u16 - 0x10000;\n\telse\n\t\treturn u16;\n\t}\n\nfunction u4toInt32(bytes, i)\n\t{\n\tvar u32 = (bytes[i] << 24) + (bytes[i+1] << 16) + (bytes[i+2] << 8) + bytes[i+3];\n\n\tif (u32 & 0x80000000)\n\t\treturn u32 - 4294967296;\n\telse\n\t\treturn u32;\n\t}\n\nvar bytes;\n\nif (\"payload_raw\" in msg) {\n    // TTN moved this because there was a decode function\n    bytes = msg.payload_raw;  // pick up data\n    // msg.payload_fields still has the decoded data\n}\nelse {\n    // no console debug\n    bytes = msg.payload;  // pick up data\n}\n\nvar decoded = {};\n\nif (msg.port === 1) {\n\tcmd = bytes[0];\n\tif (cmd == 0x19) {\n\t\t\t// i is used as the index into the message. Start with the flag byte.\n\t\tvar i = 1;\n\t\t// fetch the bitmap.\n\t\tvar flags = bytes[i++];\n\t\n\t\tif (flags & 0x1) {\n\t\t\t// set vRaw to a uint16, and increment pointer\n\t\t\tvar vRaw = (bytes[i] << 8) + bytes[i + 1];\n\t\t\ti += 2;\n\t\t\t// interpret uint16 as an int16 instead.\n\t\t\tif (vRaw & 0x8000)\n\t\t\t\tvRaw += -0x10000;\n\t\t\t// scale and save in decoded.\n\t\t\tdecoded.vBat = vRaw / 4096.0;\n\t\t}\n\t\n\t\tif (flags & 0x2) {\n\t\t\tvar iBoot = bytes[i];\n\t\t\ti += 1;\n\t\t\tdecoded.boot = iBoot;\n\t\t}\n\t\n\t\tif (flags & 0x4) {\n\t\t\t// error code, as signed int.\n\t\t\tdecoded.ModbusError = u2toInt16(bytes, i);\n\t\t\ti += 2;\n\t\t} else {\n\t\t\tdecoded.ModbusError = 0;\n\t\t}\n\t\n\t\tif (flags & 0x08) {\n\t\t\tdecoded.energyUsed = u4toInt32(bytes, i) * 100;\n\t\t\tdecoded.energySourced = u4toInt32(bytes, i+4) * 100;\n\t\t\ti += 8;\n\t\t}\n\t\n\t\tif (flags & 0x10) {\n\t\t\tdecoded.mainDemand = u4toFloat32(bytes, i);\n\t\t\ti += 4;\n\t\t} else if ((flags & 0x04) == 0) {\n\t\t\tdecoded.mainDemand = 0;\n\t\t}\n\n\t\tif (flags & 0x20) {\n\t\t\tdecoded.branchEnergyUsed = u4toInt32(bytes, i) * 100;\n\t\t\tdecoded.branchDemand = 0;\n\t\t\ti += 4;\n\t\t}\n\t\n\t\tif (flags & 0x40) {\n\t\t\tdecoded.branchDemand = u4toFloat32(bytes, i);\n\t\t\ti += 4;\n\t\t}\n\t}\n}\n\n// at this point, decoded has the real values.\n// now update msg with the new payload and new .local field\n// the old msg.payload is overwritten.\nmsg.payload = decoded;\nmsg.local =\n    {\n        nodeType: \"Model 4811\",\n        platformType: \"Catena 4801\",\n        radioType: \"Murata\",\n        applicationName: \"m4811-firmware\"\n    };\n\nreturn msg;\n","outputs":1,"noerr":0,"x":200,"y":240,"wires":[["c9bb3943.128558","ee7c386b.1877c"]]},{"id":"c9bb3943.128558","type":"function","z":"efd6cb51.b307e8","name":"Prepare for DataBase","func":"var result =\n{\n    payload:\n[{\n        msgID: msg._msgid,\n        counter: msg.counter,\n        //time: new Date(msg.metadata.time).getTime(),\n},\n{\n    devEUI: msg.hardware_serial,\n    devID: msg.dev_id,\n    displayName: msg.display_id,\n    displayKey: msg.display_key,\n    nodeType: msg.local.nodeType,\n    platformType: msg.local.platformType,\n    radioType: msg.local.radioType,\n    applicationName: msg.local.applicationName,\n}]\n};\n\nvar t = result.payload[0];\nvar tags = result.payload[1];\n\n// copy the fields we want as values to the database slot 0.\nvar value_keys = [ \n            \"vBat\", \"boot\", \"energySourced\", \"energyUsed\", \"mainDemand\", \"branchUsed\", \"branchDemand\"\n            ];\n\n// copy the fields we want as tags to the database slot 1\nvar tag_keys = [\n        \"ModbusError\"\n    ];\n\nfunction insert_value(pOutput, sInKey, inValue)\n    {\n    if (typeof inValue == \"object\" )\n        {\n        for (var i in inValue)\n            insert_value(pOutput, sInKey + \".\" + i, inValue[i]);\n        }\n    else\n        pOutput[sInKey] = inValue;\n    }\n\nfor (var i in value_keys)\n    {\n    var key = value_keys[i];\n    if (key in msg.payload)\n        {\n        // if we get an object generate an entry for each\n        insert_value(t, key, msg.payload[key]);\n        }\n    }\n\nfor (var i in tag_keys)\n    {\n    var key = tag_keys[i];\n    if (key in msg.payload)\n        tags[key] = msg.payload[key];\n    }\n\nreturn result;\n","outputs":1,"noerr":0,"x":200,"y":320,"wires":[[]]},{"id":"c29b01ee.be9e","type":"subflow:efd6cb51.b307e8","z":"3b21b7db.6abef8","name":"","env":[],"x":360,"y":260,"wires":[["ef947104.953648"],["d5674f87.2d6ee","6a66d93f.9f644"],["9a928050.9973d","4c7a5da5.4d21e4"]]},{"id":"ef947104.953648","type":"debug","z":"3b21b7db.6abef8","name":"Decoded payload","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":700,"y":220,"wires":[]},{"id":"d5674f87.2d6ee","type":"debug","z":"3b21b7db.6abef8","name":"For database","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":700,"y":260,"wires":[]},{"id":"9a928050.9973d","type":"debug","z":"3b21b7db.6abef8","name":"For RF store","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":690,"y":360,"wires":[]},{"id":"6a66d93f.9f644","type":"influxdb out","z":"3b21b7db.6abef8","influxdb":"1afacbdf.06490c","name":"Electricity measurements","measurement":"Electricity","precision":"","retentionPolicy":"","x":730,"y":300,"wires":[]},{"id":"4c7a5da5.4d21e4","type":"influxdb out","z":"3b21b7db.6abef8","influxdb":"1afacbdf.06490c","name":"Radio measurements","measurement":"RFdata","precision":"","retentionPolicy":"","x":720,"y":420,"wires":[]},{"id":"1bbca2c8.2f7345","type":"subflow:23e15b07.e584c4","z":"1425b308.007df5","name":"","x":210,"y":140,"wires":[["7169e781.cc8718"]]},{"id":"7169e781.cc8718","type":"function","z":"1425b308.007df5","name":"Decode port 2","func":"// JavaScript source code\n// This Node-RED decoding function decodes the record sent by the Catena 4612\n// simple sensor app.\n\n// calculate dewpoint (degrees C) given temperature (C) and relative humidity (0..100)\n// from http://andrew.rsmas.miami.edu/bmcnoldy/Humidity.html\n// rearranged for efficiency and to deal sanely with very low (< 1%) RH\nfunction dewpoint(t, rh) {\n    var c1 = 243.04;\n    var c2 = 17.625;\n    var h = rh / 100;\n    if (h <= 0.01)\n        h = 0.01;\n    else if (h > 1.0)\n        h = 1.0;\n\n    var lnh = Math.log(h);\n    var tpc1 = t + c1;\n    var txc2 = t * c2;\n    var txc2_tpc1 = txc2 / tpc1;\n\n    var tdew = c1 * (lnh + txc2_tpc1) / (c2 - lnh - txc2_tpc1);\n    return tdew;\n}\n\nvar b;\n\nif (\"payload_raw\" in msg) {\n    // the console already decoded this\n    b = msg.payload_raw;  // pick up data for convenience\n    // msg.payload_fields still has the decoded data\n}\nelse {\n    // no console debug\n    b = msg.payload;  // pick up data for conveneince\n}\n\n// an empty table to which we'll add result fields:\n//\n// result.vBat: the battery voltage (if present)\n// result.vBus: the USB charger voltage (if provided)\n// result.boot: the system boot counter, modulo 256\n// result.t: temperature in degrees C\n// result.p: station pressure in hPa (millibars). Note that this is not\n//   adjusted for the height above sealevel so can't be directly compared\n//   to weather.gov \"barometric pressure\"\n// result.rh: relative humidity (in %)\n// result.lux: light level, in lux\n// result.aqi: air quality index\nvar result = {};\n\n// check the message type byte\nif (msg.port != 2) {\n    // not one of ours: report an error, return without a value,\n    // so that Node-RED doesn't propagate the message any further.\n    node.error(\"not ours! \" + msg.port.toString());\n    return;\n}\n\n// i is used as the index into the message. Start with the flag byte.\nvar i = 0;\n// fetch the bitmap.\nvar flags = b[i++];\n\nif (flags & 0x1) {\n    // set vRaw to a uint16, and increment pointer\n    var vRaw = (b[i] << 8) + b[i + 1];\n    i += 2;\n    // interpret uint16 as an int16 instead.\n    if (vRaw & 0x8000)\n        vRaw += -0x10000;\n    // scale and save in result.\n    result.Vbat = vRaw / 4096.0;\n}\n\nif (flags & 0x2) {\n    var vRaw = (b[i] << 8) + b[i + 1];\n    i += 2;\n    if (vRaw & 0x8000)\n        vRaw += -0x10000;\n    result.VDD = vRaw / 4096.0;\n}\n\nif (flags & 0x4) {\n    var iBoot = b[i];\n    i += 1;\n    result.boot = iBoot;\n}\n\nif (flags & 0x8) {\n    // we have temp, pressure, RH\n    var tRaw = (b[i] << 8) + b[i + 1];\n    if (tRaw & 0x8000)\n        tRaw = -0x10000 + tRaw;\n    i += 2;\n    var pRaw = (b[i] << 8) + b[i + 1];\n    i += 2;\n    var hRaw = b[i++];\n\n    result.t = tRaw / 256;\n    result.p = pRaw * 4 / 100.0;\n    result.rh = hRaw / 256 * 100;\n    result.tDew = dewpoint(result.t, result.rh);\n}\n\nif (flags & 0x10) {\n    // we have light irradiance info\n    var irradiance = {};\n    result.irradiance = irradiance;\n\n    var lightRaw = (b[i] << 8) + b[i + 1];\n    i += 2;\n    irradiance.IR = lightRaw;\n\n    lightRaw = (b[i] << 8) + b[i + 1];\n    i += 2;\n    irradiance.White = lightRaw;\n\n    lightRaw = (b[i] << 8) + b[i + 1];\n    i += 2;\n    irradiance.UV = lightRaw;\n}\n\nif (flags & 0x20) {\n    var vRaw = (b[i] << 8) + b[i + 1];\n    i += 2;\n    if (vRaw & 0x8000)\n        vRaw += -0x10000;\n    result.vBus = vRaw / 4096.0;\n}\n\n// now update msg with the new payload and new .local field\n// the old msg.payload is overwritten.\nmsg.payload = result;\nmsg.local =\n    {\n        nodeType: \"Catena 4612\",\n        platformType: \"Catena 461x\",\n        radioType: \"Murata\",\n        applicationName: \"Simple sensor\"\n    };\n\nreturn msg;\n","outputs":1,"noerr":0,"x":190,"y":240,"wires":[["fd43e53b.f6beb","3aa0753f.2a6a3a"]],"info":"Decode data sent by an MCCI sensor device on port 2."},{"id":"fd43e53b.f6beb","type":"function","z":"1425b308.007df5","name":"Prepare for DataBase","func":"var result =\n{\n    payload:\n[{\n        msgID: msg._msgid,\n        counter: msg.counter,\n        //time: new Date(msg.metadata.time).getTime(),\n},\n{\n    devEUI: msg.hardware_serial,\n    devID: msg.dev_id,\n    displayName: msg.display_id,\n    displayKey: msg.display_key,\n    nodeType: msg.local.nodeType,\n    platformType: msg.local.platformType,\n    radioType: msg.local.radioType,\n    applicationName: msg.local.applicationName,\n}]\n};\n\nvar t = result.payload[0];\nvar tags = result.payload[1];\n\n// copy the fields we want as values to the database slot 0.\nvar value_keys = [ \n            \"Vbat\", \"VDD\", \"boot\", \"t\", \"tDew\", \"p\", \"rh\", \"irradiance\"\n            ];\n\n// copy the fields we want as tags to the database slot 1\nvar tag_keys = [\n//        \"ModbusError\"\n    ];\n\nfunction insert_value(pOutput, sInKey, inValue)\n    {\n    if (typeof inValue == \"object\" )\n        {\n        for (var i in inValue)\n            insert_value(pOutput, sInKey + \".\" + i, inValue[i]);\n        }\n    else\n        pOutput[sInKey] = inValue;\n    }\n\nfor (var i in value_keys)\n    {\n    var key = value_keys[i];\n    if (key in msg.payload)\n        {\n        // if we get an object generate an entry for each\n        insert_value(t, key, msg.payload[key]);\n        }\n    }\n\nfor (var i in tag_keys)\n    {\n    var key = tag_keys[i];\n    if (key in msg.payload)\n        tags[key] = msg.payload[key];\n    }\n\nreturn result;\n","outputs":1,"noerr":0,"x":200,"y":320,"wires":[[]]},{"id":"c959fd26.95af78","type":"function","z":"7998532e.920204","name":"Prep for RF store","func":"var data_rate_re = /SF(\\d+)BW(\\d+)/;\nvar dataRateArray = data_rate_re.exec(msg.metadata.data_rate);\n\nfunction findBestGateway(g) {\n    var rssi = -1000;\n    var bestRssi;\n    var snr = -1000;\n    var bestSnr;\n\n    for (var i in g) {\n        if (g[i].rssi > rssi) {\n            rssi = g[i].rssi;\n            bestRssi = i;\n        }\n        if (g[i].snr > snr) {\n            snr = g[i].snr;\n            bestSnr = i;\n        }\n    }\n    \n    if (bestRssi == bestSnr)\n        return g[bestRssi];\n        \n    if (rssi < -80)\n        return g[bestSnr];\n    else\n        return g[bestRssi];\n}\n\nvar g = findBestGateway(msg.metadata.gateways);\n\nvar result = \n{\n    payload:\n[{\n    frequency: msg.metadata.frequency,\n    channel: g.channel,\n    datarate: msg.metadata.data_rate,\n    codingrate: msg.metadata.coding_rate,\n    spreadingFactor: Number(dataRateArray[1]),\n    bandwidth: Number(dataRateArray[2]),\n    rssi: g.rssi,\n    snr: g.snr,\n    msgID: msg._msgid,\n    counter: msg.counter,\n},\n{\n    devEUI: msg.hardware_serial,\n    devID: msg.dev_id,\n    displayName: msg.display_id,\n    displayKey: msg.display_key,\n    gatewayEUI: g.gtw_id,\n    nodeType: msg.local.nodeType,\n    platformType: msg.local.platformType,\n    radioType: msg.local.radioType,\n    applicationName: msg.local.applicationName,\n    // we make these tags so we can plot rssi by \n    // channel, etc.\n    frequency: msg.metadata.frequency,\n    channel: g.channel,\n    datarate: msg.metadata.data_rate,\n    spreadingFactor: Number(dataRateArray[1]),\n    bandwidth: Number(dataRateArray[2]),\n    codingrate: msg.metadata.coding_rate,\n}]\n};\nreturn result;","outputs":1,"noerr":0,"x":190,"y":80,"wires":[[]]},{"id":"fc52c7d6.af67e8","type":"switch","z":"3b21b7db.6abef8","name":"Port","property":"port","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"str"},{"t":"eq","v":"2","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":3,"x":130,"y":360,"wires":[["c29b01ee.be9e"],["3bee1a37.7a8afe"],["2326a8cd.940a7"]],"info":"Use the port number to route the message"},{"id":"3bee1a37.7a8afe","type":"subflow:1425b308.007df5","z":"3b21b7db.6abef8","name":"","x":360,"y":480,"wires":[["ef947104.953648"],["2884083e.4779b","d5674f87.2d6ee"],["4c7a5da5.4d21e4","9a928050.9973d"]]},{"id":"2884083e.4779b","type":"influxdb out","z":"3b21b7db.6abef8","influxdb":"1afacbdf.06490c","name":"Environmental Data","measurement":"EnvironmentalData","precision":"","retentionPolicy":"","x":710,"y":500,"wires":[]},{"id":"2326a8cd.940a7","type":"debug","z":"3b21b7db.6abef8","name":"Unrecognized port","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":270,"y":600,"wires":[]},{"id":"3aa0753f.2a6a3a","type":"subflow:7998532e.920204","z":"1425b308.007df5","name":"Prepare for RF database","env":[],"x":270,"y":460,"wires":[[]]},{"id":"ee7c386b.1877c","type":"subflow:7998532e.920204","z":"efd6cb51.b307e8","name":"","env":[],"x":190,"y":460,"wires":[[]]}]